%%writefile password_cli_random_chose.py

import os
import sys

PASSWORD_FILE = "passwords.txt"
USED_FILE = "used_passwords.txt"

RED = "\033[31m"
BLUE = "\033[34m"
RESET = "\033[0m"

def load_list(filename):
    if not os.path.exists(filename):
        return []
    with open(filename, "r") as f:
        return f.read().splitlines()

def save_list(filename, data):
    with open(filename, "w") as f:
        f.write("\n".join(data) + "\n")

def parse_used_lines(used_entries):
    used_lines = set()
    line_to_password = {}
    for entry in used_entries:
        if entry.strip():
            parts = entry.split(":", 1)
            if len(parts) == 2 and parts[0].isdigit():
                line_num = int(parts[0])
                used_lines.add(line_num)
                line_to_password[line_num] = parts[1]
    return used_lines, line_to_password

def show_progress(used_lines, total_lines):
    k = len(used_lines)
    print(f"🔢 {k} of {total_lines} passwords used")
    print(f"⏳ Remaining: {total_lines - k} passwords left")

def try_next_password(start_line_1based=1):
    passwords = load_list(PASSWORD_FILE)
    used_entries = load_list(USED_FILE)
    used_lines, line_to_password = parse_used_lines(used_entries)

    total_lines = len(passwords)

    if total_lines == 0:
        print("🚫 Password file is empty.")
        return

    if start_line_1based < 1:
        print(f"❌ Invalid start line: {start_line_1based}. Must be ≥ 1.")
        return

    if start_line_1based > total_lines:
        print(f"❌ Start line {start_line_1based} exceeds max line number {total_lines}.")
        return

    line_num = start_line_1based
    index = line_num - 1  # convert to 0-based

    if line_num in used_lines:
        prev_pwd = line_to_password[line_num]
        print(f"\n❌ Password at line {line_num} has already been used: {RED}{prev_pwd}{RESET}")
        return

    pwd = passwords[index]
    entry = f"{line_num}:{pwd}"
    used_entries.append(entry)
    print(f"\n🔐 Using password at line {line_num}: {RED}{pwd}{RESET}")
    show_progress(used_lines | {line_num}, total_lines)
    save_list(USED_FILE, used_entries)

def show_inventory():
    used = load_list(USED_FILE)
    if not used:
        print("📦 No passwords used yet.")
        return
    print("📜 Used password inventory:")
    for entry in used:
        print(f"{RED}- {entry}{RESET}")

def reset():
    if os.path.exists(USED_FILE):
        os.remove(USED_FILE)
    print("🧹 Inventory reset. Start fresh.")

def main():
    if len(sys.argv) < 2:
        print("Usage: python password_cli_random_chose.py [use [k]|show|reset]")
        return

    command = sys.argv[1]

    if command == "use":
        try:
            start_line = int(sys.argv[2]) if len(sys.argv) > 2 else 1
        except ValueError:
            print("❌ Invalid line number. Please provide an integer.")
            return
        try_next_password(start_line)
    elif command == "show":
        show_inventory()
    elif command == "reset":
        reset()
    else:
        print("❌ Unknown command. Use: use [k] | show | reset")

if __name__ == "__main__":
    main()

"""
!python password_cli_random_chose.py use 20
!python password_cli_random_chose.py use 2
!python password_cli_random_chose.py use 2 
!python password_cli_random_chose.py use 7

❌ Start line 20 exceeds max line number 10.

🔐 Using password at line 2: aJcN^&21
🔢 1 of 10 passwords used
⏳ Remaining: 9 passwords left

❌ Password at line 2 has already been used: aJcN^&21

🔐 Using password at line 7: pH1!2c7I
🔢 2 of 10 passwords used
⏳ Remaining: 8 passwords left
"""
